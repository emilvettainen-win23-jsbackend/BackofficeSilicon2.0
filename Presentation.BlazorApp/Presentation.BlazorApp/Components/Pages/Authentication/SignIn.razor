
@using Presentation.BlazorApp.Models.Authentication
@using Infrastructure.Data.Entities
@using Presentation.BlazorApp.Services
@using Microsoft.AspNetCore.Identity


@page "/signin"

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<SignIn> Logger
@* @inject UserService UserService *@
@inject NavigationManager NavigationManager

<section class="signin">
    <div class="container">

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="status-message">
                <p class="@(isError ? "text-danger" : "text-success")">@statusMessage</p>
            </div>
        }
        @if (isLoading)
        {
            <p> Loading ....</p>
        }
        else
        {
            <EditForm Model="SignInForm" method="post" FormName="signin" OnValidSubmit="SignInAsync" Enhance novalidate>
                <DataAnnotationsValidator />
                <h1>Welcome Back</h1>
                <div class="content">
                    <div id="form-email" class="input-group">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="SignInForm.Email" class="form-control" />
                        <ValidationMessage For="() => SignInForm.Email" class="text-danger" />
                    </div>
                    <div id="form-password" class="input-group">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="SignInForm.Password" class="form-control" type="password" />
                        <ValidationMessage For="() => SignInForm.Password" class="text-danger" />
                    </div>
                    <div id="form-remember" class="checkbox-group">
                        <InputCheckbox id="remember" @bind-Value="SignInForm.RememberMe" class="form-check-input" />
                        <label for="remember">Remember me</label>
                    </div>
                    <button disabled="@IsBusy" id="form-submit" class="btn-theme" type="submit">
                        @if (IsBusy)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        <span>Sign In</span>
                    </button>
                    <a href="account/forgotpassword" id="form-forgot-password" class="text-m">Forgot your password?</a>
                    <hr id="form-hr" />
                </div>
            </EditForm>
        }

    </div>
</section>

@code {
    private string? errorMessage;
    private bool IsBusy;
    private string statusMessage = "";
    private bool isError;
    private bool isLoading;

    [SupplyParameterFromForm]
    private SignInModel SignInForm { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }



    private async Task SignInAsync()
    {
        IsBusy = true;

        var result = await SignInManager.PasswordSignInAsync(SignInForm.Email, SignInForm.Password, SignInForm.RememberMe, false);
        if (result.Succeeded)
        {
            statusMessage = $"You are signed in.";
            // NavigationManager.NavigateTo(ReturnUrl ?? "");
        }
        else if (result.IsNotAllowed)
        {
            statusMessage = $"Unable to sign in.";
            IsBusy = false;
        }
        else
        {
            SignInForm = new();
            statusMessage = $"Incorrect email or password.";
            IsBusy = false;
        }

    }
}
