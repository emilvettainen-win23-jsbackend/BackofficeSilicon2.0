@page "/courses"
@using System.Text.Json
@using Presentation.BlazorApp.Models.Courses
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using Presentation.BlazorApp.Services

@inject HttpClient Http
@inject CourseService CourseService

@* @attribute [Authorize] *@
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))

<section class="courses">

    <div class="course-header">
        <h3>Courses</h3>
        <NavLink class="nav-link" href="/new-course">
            <button class="btn btn-primary" href="/new-course">New course</button>
        </NavLink>
    </div>
    

    @if (courses == null)
    {
        <p>Loading...</p>
    }
    else if (isError)
    {
        <p>Kan inte hämta kurser just nu.</p>
    }
    else if (courses.Count == 0)
    {
        <p>No courses available.</p>
    }
    else
    {
        if (deleteSuccess)
        {
            <span class="notification"><p>Course has been deleted.</p></span>
        }
        if (deleteError)
        {
            <span class="notification"><p>Something went wrong. Could not delete course.</p></span>
        }

        <table class="table table-bordered">
            <thead>
                <tr class="course-header">
                    <th class="title">Title</th>
                    <th>Category</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>

                @foreach (var course in courses)
                {
                    <tr class="course-info">
                        <th>@course.CourseTitle</th>
                        <th>@course.Category</th>
                        <th class="buttons">
                            <button class="btn btn-primary">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteAsync(course.Id)">Remove</button>
                        </th>
                    </tr>
                }

            </tbody>

        </table>
    }
</section>




@code {
    private List<CourseSelect>? courses = new();

    private bool isError;
    private bool deleteSuccess;
    private bool deleteError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // await Task.Delay(3000);
            courses = await CourseService.GetAllCoursesAsync();
        }
        catch (Exception)
        {
            isError = true;
        }
    }

    private async Task DeleteAsync(string id)
    {
        try
        {
            var result = await CourseService.DeleteCourseAsync(id);

            if (result == true)
            {
                var removedCourse = courses!.FirstOrDefault(c => c.Id == id);
                courses!.Remove(removedCourse!);

                StateHasChanged();
                deleteSuccess = true;
            }
            else
                deleteError = true;
        }
        catch (Exception)
        {
            deleteError = true;
        }
    }
}


                 