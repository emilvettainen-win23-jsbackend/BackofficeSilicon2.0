@page "/customers"
@* @using System.Text.Json *@
@using Microsoft.AspNetCore.Authorization
@using Presentation.BlazorApp.Models.Customers
@* @using System.Net.Http.Json
@using System.Text.Json.Serialization *@
@using Presentation.BlazorApp.Services

@inject HttpClient Http
@inject CourseService CourseService

@attribute [Authorize(Roles = "SuperAdmin, CIO, Admin")]
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))

<section class="customers">

    <div class="header">
        <h3>Customers</h3>
    </div>


    @if (customers == null && isLoading)
    {
        <p>Loading...</p>
    }
    else if (isError)
    {
        <p>Can not fetch customers right now.</p>
    }
    else if (customers?.Count == 0 && !isLoading)
    {
        <p>No customers available.</p>
    }
    else
    {
        if (deleteSuccess)
        {
            <span class="notification"><p>Customer has been deleted from the system.</p></span>
        }
        if (deleteError)
        {
            <span class="notification"><p>Something went wrong. Could not delete customer.</p></span>
        }

        <table class="table table-bordered">
            <thead>
                <tr class="course-header">
                    <th class="title">Name</th>
                    <th>Email</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>

                @if (customers != null) {
                    @foreach (var customer in customers!)
                    {
                        <tr class="course-info">
                        <th>@customer.FirstName @customer.LastName</th>
                        <th>@customer.Email</th>
                        <th class="buttons">
                        <a href="/edit-course/@customer.Id" class="btn btn-primary">Edit</a>
                         <button class="btn btn-danger" @onclick="() => DeleteAsync(customer.Id)">Remove</button>
                        </th>
                        </tr>
                    }
                }

            </tbody>

        </table>
    }
</section>




@code {
    private List<Customers>? customers = new();

    private bool isError;
    private bool deleteSuccess;
    private bool deleteError;
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            // customers = await CustomersService.GetAllCustomersAsync();
        }
        catch (Exception)
        {
            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteAsync(string id)
    {
        // try
        // {
        //     var result = await CustomersService.DeleteCustomerAsync(id);

        //     if (result == true)
        //     {
        //         var removedCustomer = customers!.FirstOrDefault(c => c.Id == id);
        //         customers!.Remove(removedCostumer!);

        //         StateHasChanged();
        //         deleteSuccess = true;
        //     }
        //     else
        //         deleteError = true;
        // }
        // catch (Exception)
        // {
        //     deleteError = true;
        // }
    }
}
