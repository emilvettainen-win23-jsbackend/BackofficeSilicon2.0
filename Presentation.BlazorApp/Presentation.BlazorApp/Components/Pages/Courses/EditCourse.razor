@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Presentation.BlazorApp.Models.Courses
@using Presentation.BlazorApp.Services

@page "/edit-course/{id}"

@attribute [Authorize(Roles = "SuperAdmin, CIO, Admin")]
@inject HttpClient HttpClient
@inject CourseService CourseService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))


<section class="update-course">
    <div class="container">

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="status-message">
                <p class="@(isError ? "text-danger" : "text-success")">@statusMessage</p>
            </div>
        }

        @if (isLoading)
        {
            <p> Loading ....</p>
        }
        else
        {
            <h3>Edit Course</h3>

            <EditForm Model="UpdatedCourse" method="post" OnValidSubmit="HandleSubmitAsync" Enhance novalidate>
                <DataAnnotationsValidator />

                <div class="content">

                    <div>
                        <label for="title">Title</label>
                        <InputText id="title" @bind-Value="UpdatedCourse.CourseTitle" class="form-control" />
                    </div>

                    <div>
                        <label for="ingress">Ingress</label>
                        <InputText id="ingress" @bind-Value="UpdatedCourse.CourseIngress" class="form-control" />
                    </div>

                    <div>
                        <label for="courseimg">Course image</label>
                        <span>JPG, JPEG, SVG or PNG.</span>
                        <span>Max filesize 2500 * 1500 </span>
                        <div class="upload-image">
                            <InputFile id="courseimg" @bind-Value="UpdatedCourse.CourseImageUrl"/>
                            <img src="@UpdatedCourse.CourseImageUrl" style="max-width: 200px; max-height: 200px;" />
                        </div>
                    </div>

                    <div>
                        <label class="checkbox-label" for="bestseller">Bestseller</label>
                        <InputCheckbox id="bestseller" @bind-Value="UpdatedCourse.IsBestseller" class="form-check-input" />
                    </div>

                    <div>
                        <label for="category">Category</label>
                        <InputText id="category" @bind-Value="UpdatedCourse.Category" class="form-control" />
                    </div>

                    <div class="rating">
                        <label for="rating">Rating in numbers</label>
                        <InputNumber id="rating" @bind-Value="UpdatedCourse.Rating.InNumbers" class="form-control" />
                        <label for="rating">Rating in procent</label>
                        <InputNumber id="rating" @bind-Value="UpdatedCourse.Rating.InProcent" class="form-control" />
                    </div>

                    <div>
                        <label for="author">Author</label>
                        <InputText id="author" @bind-Value="UpdatedCourse.Author.FullName" class="form-control" placeholder="Full name" />
                        <InputTextArea id="author" @bind-Value="UpdatedCourse.Author.Biography" class="form-control" placeholder="Biography" />

                        <label for="authorimg">Profile image</label>
                        <span>JPG, JPEG, SVG or PNG.</span>
                        <span>Max filesize 2500 * 1500 </span>
                        <div class="upload-image">
                            <InputFile id="authorimg" @bind-Value="UpdatedCourse.Author.ProfileImageUrl"/>
                            <img src="@UpdatedCourse.Author.ProfileImageUrl" style="max-width: 200px; max-height: 200px;" />
                        </div>
                    
                        <InputText id="author" @bind-Value="UpdatedCourse.Author.SocialMedia.FacebookUrl" class="form-control" placeholder="Facebook url (optional)" />
                        <InputText id="author" @bind-Value="UpdatedCourse.Author.SocialMedia.YouTubeUrl" class="form-control" placeholder="YouTube url (optional)" />
                        <InputText id="author" @bind-Value="UpdatedCourse.Author.SocialMedia.Subscribers" class="form-control" placeholder="Subscribers (optional)" />
                        <InputText id="author" @bind-Value="UpdatedCourse.Author.SocialMedia.Followers" class="form-control" placeholder="Followers (optional)" />
                    </div>

                    <div class="price">
                        <label for="price">Original price</label>
                        <InputNumber id="price" @bind-Value="UpdatedCourse.Prices.OriginalPrice" class="form-control" />
                        <label for="price">Discounted price</label>
                        <InputNumber id="price" @bind-Value="UpdatedCourse.Prices.DiscountPrice" class="form-control" />
                    </div>

                    <div>
                        <label for="included">Hours of video</label>
                        <InputNumber id="included" @bind-Value="UpdatedCourse.Included.HoursOfVideo" class="form-control" />
                        <label for="included">Number of articles</label>
                        <InputNumber id="included" @bind-Value="UpdatedCourse.Included.Articles" class="form-control" />
                        <label for="included">Number of recourses</label>
                        <InputNumber id="included" @bind-Value="UpdatedCourse.Included.Resources" class="form-control" />
                        <label class="checkbox-label" for="included">Lifetime access</label>
                        <InputCheckbox id="included" @bind-Value="UpdatedCourse.Included.LifetimeAccess" class="form-check-input" />
                        <label class="checkbox-label certificate" for="included">Certificate</label>
                        <InputCheckbox id="included" @bind-Value="UpdatedCourse.Included.Certificate" class="form-check-input" />
                    </div>

                <div class="highlights">
                <label>Highlights</label>
                <button type="button" class="btn btn-secondary" @onclick="AddHighlight">Add highlight</button>
                @foreach (var highlight in UpdatedCourse.Highlights)
                {
                <div class="highlight-item">
                <InputText @bind-Value="highlight.Highlight" class="form-control" />
                <button type="button" class="btn btn-danger" @onclick="() => RemoveHighlight(highlight)">Remove</button>
                </div>
                }
                </div>

                <div class="details">
                <label>Program details</label>
                <button type="button" class="btn btn-secondary" @onclick="AddProgramDetail">Add program detail</button>

                @foreach (var detail in UpdatedCourse.Content)
                {
                <div class="detail-item">
                <InputText @bind-Value="detail.Title" class="form-control" placeholder="Title" />
                <InputText @bind-Value="detail.Description" class="form-control" placeholder="Description" />
                <button type="button" class="btn btn-danger" @onclick="() => RemoveProgramDetail(detail)">Remove</button>
                </div>
                }
                </div>
               
                </div>

                <div class="form-buttons">
                    <button type="submit" class="btn btn-primary">Save</button>

                    <NavLink class="nav-link" href="/courses">
                        <button type="button" class="btn btn-danger">Cancel</button>
                    </NavLink>
                </div>

            </EditForm>
        }

        
    </div>

</section>


@code {
    [SupplyParameterFromForm]
    private CourseOne UpdatedCourse { get; set; } = new();

    [Parameter]
    public string? Id { get; set; }

    private string statusMessage = "";
    private bool isError;
    private bool isLoading;


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo("/courses");
        }


        try
        {
            isLoading = true;

            UpdatedCourse = await CourseService.GetOneCourseAsync(Id!);
        }
        catch (Exception ex)
        {
            statusMessage = $"Error fetching course: {ex.Message}";
            isError = true;
        }
        finally{
            isLoading = false;
        }
    }

    #region UploadCourseImg

    private async Task UploadCourseImg(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            var url = ($"{Configuration["CourseImg"]}");

            var formData = new MultipartFormDataContent();
            formData.Headers.ContentType!.MediaType = "multipart/form-data";

            formData.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);
            var response = await HttpClient.PostAsync(url, formData);

            if (response.IsSuccessStatusCode)
            {
                var imageUrl = await response.Content.ReadAsStringAsync();
                UpdatedCourse.CourseImageUrl = imageUrl;
                statusMessage = "Image was uploaded successfully.";
                isError = false;
            }
            else
            {
                statusMessage = "Something went wrong. Could not upload file.";
                isError = true;
            }
        }
        else
        {
            statusMessage = "Please select a file to upload.";
            isError = true;
        }
    }

    #endregion

    #region UploadAuthorImg

    private async Task UploadAuthorImg(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            var url = ($"{Configuration["ProfileImg"]}");

            var formData = new MultipartFormDataContent();
            formData.Headers.ContentType!.MediaType = "multipart/form-data";

            formData.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);
            var response = await HttpClient.PostAsync(url, formData);

            if (response.IsSuccessStatusCode)
            {
                var imageUrl = await response.Content.ReadAsStringAsync();
                UpdatedCourse.Author.ProfileImageUrl = imageUrl;
                statusMessage = "Image was uploaded successfully.";
                isError = false;
            }
            else
            {
                statusMessage = "Something went wrong. Could not upload file.";
                isError = true;
            }
        }
        else
        {
            statusMessage = "Please select a file to upload.";
            isError = true;
        }
    }

    #endregion

    #region Highlights

    private void AddHighlight()
    {
        UpdatedCourse.Highlights.Add(new Highlights());
    }

    private void RemoveHighlight(Highlights highlight)
    {
        UpdatedCourse.Highlights.Remove(highlight);
    }

    #endregion

    #region ProgramDetails

    private void AddProgramDetail()
    {
        UpdatedCourse.Content.Add(new ProgramDetail());
    }

    private void RemoveProgramDetail(ProgramDetail detail)
    {
        UpdatedCourse.Content.Remove(detail);
    }

    #endregion


    #region HandleSubmitAsync

    private async Task HandleSubmitAsync()
    {
        var success = await CourseService.UpdateCourseAsync(UpdatedCourse);
        if (success)
        {
            statusMessage = "Course updated successfully.";
            isError = false;
        }
        else
        {
            statusMessage = "Failed to update course.";
            isError = true;
        }
    }

    #endregion
}