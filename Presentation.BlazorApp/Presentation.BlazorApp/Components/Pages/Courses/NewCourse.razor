@page "/new-course"
@using Presentation.BlazorApp.Models.Courses
@using Presentation.BlazorApp.Services

@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject CourseService CourseService


<section class="new-course">
    <div class="container mb-3">

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="status-message">
                <p class="@(isError ? "text-danger" : "text-success")">@statusMessage</p>
            </div>
        }

        <h3>New Course</h3>

        <EditForm FormName="" Model="Course" method="post" OnValidSubmit="HandleSubmitAsync" Enhance novalidate>
            <DataAnnotationsValidator />
            <div class="content">
                <div id="title" class="input-group">
                    <label for="title">Title</label>
                    <InputText id="title" @bind-Value="Course.CourseTitle" class="form-control" />
                </div>
                <div>
                    <label for="ingress">Ingress</label>
                    <InputText id="ingress" @bind-Value="Course.CourseIngress" class="form-control" />
                </div>
                <div>
                    <label for="description">Description</label>
                    <InputTextArea id="description" @bind-Value="Course.CourseDescription" class="form-control" />
                </div>
                <div>
                    <label for="courseimg">CourseImg</label>
                    <div class="upload-image">
                        <InputFile id="courseimg" OnChange="UploadCourseImg" />
                        <img src="@Course.CourseImageUrl" />
                    </div>
                </div>
                <div>
                    <label for="bestseller">Bestseller</label>
                    <InputCheckbox id="bestseller" @bind-Value="Course.IsBestseller" class="form-check-input" />
                </div>

                @* scroll lista? *@
                <div>
                    <label for="category">Category</label>
                    <InputText id="category" @bind-Value="Course.Category" class="form-control" />

                    @*                 <InputSelect @bind-Value="Course.Category"  class="form-control">
                    <option value="">Select</option>
                    @foreach (var category in testCategories)
                    {
                    <option checked="@category" value="@category">@category</option>
                    }
                    </InputSelect> *@
                </div>


                <div class="rating">
                    <label for="rating">Rating in numbers</label>
                    <InputNumber id="rating" @bind-Value="Course.Rating.InNumbers" class="form-control" />
                    <label for="rating">Rating in procent</label>
                    <InputNumber id="rating" @bind-Value="Course.Rating.InProcent" class="form-control" />
                </div>

                @* scroll lista? *@
                <div>
                    <label for="author">Author</label>
                    <InputText id="author" @bind-Value="Course.Author.FullName" class="form-control" placeholder="Full name" />
                    <InputTextArea id="author" @bind-Value="Course.Author.Biography" class="form-control" placeholder="Biography" />

                    <label for="authorimg">AuthorImg</label>
                    <div class="upload-image">
                        <InputFile id="authorimg" OnChange="UploadAuthorImg" />
                        <img src="@Course.Author.ProfileImageUrl" />
                    </div>

                    <InputText id="author" @bind-Value="Course.Author.SocialMedia.FacebookUrl" class="form-control" placeholder="Facebook url (optional)" />
                    <InputText id="author" @bind-Value="Course.Author.SocialMedia.YouTubeUrl" class="form-control" placeholder="YouTube url (optional)" />
                    <InputText id="author" @bind-Value="Course.Author.SocialMedia.Subscribers" class="form-control" placeholder="Subscribers (optional)" />
                    <InputText id="author" @bind-Value="Course.Author.SocialMedia.Followers" class="form-control" placeholder="Followers (optional)" />
                </div>

                <div class="price">
                    <label for="price">Original price</label>
                    <InputNumber id="price" @bind-Value="Course.Prices.OriginalPrice" class="form-control" />
                    <label for="price">Discounted price</label>
                    <InputNumber id="price" @bind-Value="Course.Prices.DiscountPrice" class="form-control" />
                </div>

                <div>
                    <label for="included">Hours of video</label>
                    <InputNumber id="included" @bind-Value="Course.Included.HoursOfVideo" class="form-control" />
                    <label for="included">Number of articles</label>
                    <InputNumber id="included" @bind-Value="Course.Included.Articles" class="form-control" />
                    <label for="included">Number of recourses</label>
                    <InputNumber id="included" @bind-Value="Course.Included.Resources" class="form-control" />
                    <label for="included">Lifetime access</label>
                    <InputCheckbox id="included" @bind-Value="Course.Included.LifetimeAccess" class="form-check-input" />
                    <label for="included">Certificate</label>
                    <InputCheckbox id="included" @bind-Value="Course.Included.Certificate" class="form-check-input" />
                </div>

            </div>

            <div class="form-buttons">
                <button type="submit" class="btn btn-primary">Save</button>

                <NavLink class="nav-link" href="/courses">
                    <button type="button" class="btn btn-secondary">Cancel</button>
                </NavLink>               
            </div>

        </EditForm>
    </div>

</section>

@*         public List<Highlights> Highlights { get; set; } = null!;
        public List<ProgramDetail> Content { get; set; } = null!; *@



@code {
    [SupplyParameterFromForm]
    private Course Course { get; set; } = new();

    private string statusMessage = "";
    private bool isError;

    #region UploadCourseImg

    private async Task UploadCourseImg(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            var url = "https://fileprovider-silicon-ev-er.azurewebsites.net/api/Upload?code=GJjHL29kB0kQP77bmDGnKEuWpfRlQnVsvW8RfuIpyv9MAzFuw0Xu9A%3D%3D&containerName=courses";

            var formData = new MultipartFormDataContent();
            formData.Headers.ContentType!.MediaType = "multipart/form-data";

            formData.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);
            var response = await HttpClient.PostAsync(url, formData);

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Image was uploaded successfully.";
            }
            else
            {
                statusMessage = "Something went wrong. Could not upload file.";
            }
        }
        else
        {
            statusMessage = "Please select a file to upload.";
        }
    }

    #endregion

    #region UploadAuthorImg

    private async Task UploadAuthorImg(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            var url = "https://fileprovider-silicon-ev-er.azurewebsites.net/api/Upload?code=GJjHL29kB0kQP77bmDGnKEuWpfRlQnVsvW8RfuIpyv9MAzFuw0Xu9A%3D%3D&containerName=profiles";

            var formData = new MultipartFormDataContent();
            formData.Headers.ContentType!.MediaType = "multipart/form-data";

            formData.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);
            var response = await HttpClient.PostAsync(url, formData);

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Image was uploaded successfully.";
            }
            else
            {
                statusMessage = "Something went wrong. Could not upload file.";
            }
        }
        else
        {
            statusMessage = "Please select a file to upload.";
        }
    }

    #endregion

    #region HandleSubmitAsync

    private async Task HandleSubmitAsync()
    {
        var success = await CourseService.CreateCourseAsync(Course);
        if (success)
        {
            statusMessage = "Course created successfully.";
            isError = false;
        }
        else
        {
            statusMessage = "Failed to create course.";
            isError = true;
        }
    }

    #endregion





    #region Get all authors and cathegories

    // private List<CourseAuthor>? Authors = new();
    // private List<CourseCategory>? Categories = new();

    // private List<string>? testCategories;

    // private List<string> GenerateCategories()
    // {
    //     return new List<string>
    //     {
    //         "Frontend",
    //         "Backend",
    //         "C#"
    //     };
    // }

    // protected override void OnInitialized()
    // {
    //     testCategories = GenerateCategories();
    // }


    #region GetAuthorsAsync

    // private async Task GetAuthorsAsync()
    // {
    //     try
    //     {
    //         // Authors = await CourseService.GetAllAuthorsAsync();
    //     }
    //     catch (Exception)
    //     {
    //         isError = true;
    //     }
    // }

    #endregion

    #region GetCategoriesAsync

    // private async Task GetCategoriesAsync()
    // {
    //     try
    //     {
    //         // Categories = await CourseService.GetAllCategoriesAsync();
    //     }
    //     catch (Exception)
    //     {
    //         isError = true;
    //     }
    // }

    #endregion

    #endregion




}
