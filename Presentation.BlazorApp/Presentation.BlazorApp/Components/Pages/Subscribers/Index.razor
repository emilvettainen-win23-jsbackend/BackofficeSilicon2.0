@page "/subscribers"
@using Microsoft.AspNetCore.Authorization
@using Presentation.BlazorApp.Models.Subscribers
@using Presentation.BlazorApp.Services

@inject HttpClient Http
@inject SubscriberService SubscriberService
@attribute [Authorize(Roles = "SuperAdmin, CIO, Admin")]
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))


<section class="subscribers">

    <div class="subscribe-header">
        <h3>Subscribers</h3>
@*         <NavLink class="nav-link" href="/new-subscriber">
            <button class="btn btn-primary" href="/new-course">Add subscriber</button>
        </NavLink> *@
    </div>


    @if (isError)
    {
        <p>Can not fetch subscribers right now.</p>
    }
    else if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (subscribers?.Count == 0)
    {
        <p>No subscribers available.</p>
    }
    else
    {
        if (deleteSuccess)
        {
            <span class="notification"><p>Subscription has been deleted.</p></span>
        }
        if (deleteError)
        {
            <span class="notification"><p>Something went wrong. Could not delete subscription.</p></span>
        }

        <table class="table table-bordered">
            <thead>
                <tr class="course-header">
                    <th class="title">Email</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>

                @if (subscribers != null)
                {
                    @foreach (var subscriber in subscribers)
                    {
                        <tr class="subscriber-info">
                            <th>@subscriber.Email</th>
                            <th class="buttons">

                                <a href="/edit-subscription/@subscriber.Id" class="btn btn-primary">Edit</a>

                                <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(subscriber.Email)">Remove</button>
                            </th>
                        </tr>
                    }
                }

            </tbody>

        </table>
    }

    <div class="deletebox" tabindex="-1" style="display:@(showDeleteConfirmation ? "block" : "none");">
        <div class="box">
            <div class="content">
                <div class="header">
                    <h5 class="title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmation"></button>
                </div>
                <div class="body">
                    <p>Are you sure you want to delete this subscription?</p>
                </div>
                <div class="footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmation">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>

</section>

@code {
    private List<AllSubscribers>? subscribers = new();

    private bool isError;
    private bool deleteSuccess;
    private bool deleteError;
    private bool isLoading;

    private bool showDeleteConfirmation = false;
    private string subscribeEmailToDelete = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            subscribers = await SubscriberService.GetAllSubscribersAsync();
            isError = false;
            
        }
        catch (Exception)
        {
            isLoading = false;
            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowDeleteConfirmation(string email)
    {
        subscribeEmailToDelete = email;
        showDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        subscribeEmailToDelete = string.Empty;
    }

    private async Task ConfirmDelete()
    {
        showDeleteConfirmation = false;
        await DeleteAsync(subscribeEmailToDelete);
    }

    private async Task DeleteAsync(string email)
    {
        try
        {
            var result = await SubscriberService.DeleteSubscriberAsync(email);

            if (result == true)
            {
                var removedSubscriber = subscribers!.FirstOrDefault(s => s.Email == email);
                subscribers!.Remove(removedSubscriber!);

                StateHasChanged();
                deleteSuccess = true;
            }
            else
                deleteError = true;
        }
        catch (Exception)
        {
            deleteError = true;
        }
    }
}
